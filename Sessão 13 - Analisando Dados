{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true,"collapsed_sections":["lJeDRY2Zc6Tn"],"authorship_tag":"ABX9TyOX1bahWkAj60O1/Nk3uvMi"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["###### Inicialização"],"metadata":{"id":"lJeDRY2Zc6Tn"}},{"cell_type":"code","source":["# instalar as dependências\n","!apt-get install openjdk-8-jdk-headless -qq > /dev/null\n","!wget -q https://dlcdn.apache.org/spark/spark-3.4.0/spark-3.4.0-bin-hadoop3.tgz\n","!tar xf spark-3.4.0-bin-hadoop3.tgz\n","!pip install -q findspark"],"metadata":{"id":"ty_kN91oadtM","executionInfo":{"status":"ok","timestamp":1688322314776,"user_tz":180,"elapsed":22816,"user":{"displayName":"Luan Corumba","userId":"07892592111474770617"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["# configurar as variáveis de ambiente\n","import os\n","os.environ[\"JAVA_HOME\"] = \"/usr/lib/jvm/java-8-openjdk-amd64\"\n","os.environ[\"SPARK_HOME\"] = \"/content/spark-3.4.0-bin-hadoop3\"\n","\n","# tornar o pyspark \"importável\"\n","import findspark\n","findspark.init('spark-3.4.0-bin-hadoop3')"],"metadata":{"id":"GMGdL4xyc423","executionInfo":{"status":"ok","timestamp":1688322314781,"user_tz":180,"elapsed":49,"user":{"displayName":"Luan Corumba","userId":"07892592111474770617"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["# download do http para arquivo local\n","!wget --quiet --show-progress http://data.insideairbnb.com/brazil/rj/rio-de-janeiro/2023-03-28/visualisations/listings.csv"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qRro-0ZO38tf","executionInfo":{"status":"ok","timestamp":1688322314782,"user_tz":180,"elapsed":42,"user":{"displayName":"Luan Corumba","userId":"07892592111474770617"}},"outputId":"ff9789a3-1f9d-42ad-f3ee-15eed93a3710"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["listings.csv.1      100%[===================>]   4.37M  18.6MB/s    in 0.2s    \n"]}]},{"cell_type":"code","source":["!wget --quiet --show-progress https://www.arcgis.com/sharing/rest/content/items/3f382d42cf1d4f20bc489f5612481ede/data\n","!mv data natalidade_mortalidade_infantil.xls"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"szLgdNLpV4SH","executionInfo":{"status":"ok","timestamp":1688322316640,"user_tz":180,"elapsed":1887,"user":{"displayName":"Luan Corumba","userId":"07892592111474770617"}},"outputId":"351ca8eb-a3a0-46df-a2e4-64ab7188645d"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["\rdata                  0%[                    ]       0  --.-KB/s               \rdata                100%[===================>] 633.00K  --.-KB/s    in 0.1s    \n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from pyspark.sql import SparkSession\n","from pyspark.sql import functions as f\n","spark = SparkSession.builder.master('local[*]').getOrCreate()\n","sc = spark.sparkContext"],"metadata":{"id":"uWyD7ZsJV7GT","executionInfo":{"status":"ok","timestamp":1688322316641,"user_tz":180,"elapsed":20,"user":{"displayName":"Luan Corumba","userId":"07892592111474770617"}}},"execution_count":18,"outputs":[]},{"cell_type":"markdown","source":["# PySpark (Sessão 13)"],"metadata":{"id":"frFI5O7cZ5L8"}},{"cell_type":"markdown","source":["![img](https://upload.wikimedia.org/wikipedia/commons/thumb/f/f3/Apache_Spark_logo.svg/250px-Apache_Spark_logo.svg.png)\n","\n","\n","https://spark.apache.org/docs/latest/api/python/"],"metadata":{"id":"pJCODccgTiQD"}},{"cell_type":"markdown","source":["## Recapitulando o que vimos antes..."],"metadata":{"id":"bGI5IDjEL5Z7"}},{"cell_type":"markdown","source":["1. Estruturando uma análise\n","2. Estruturando perguntas\n","3. Realisando as análises"],"metadata":{"id":"qcsQzsgQ2LD2"}},{"cell_type":"markdown","source":["## Análise do Plano de Execução"],"metadata":{"id":"w_GXUXTITQuX"}},{"cell_type":"markdown","source":["<img src=\"https://miro.medium.com/v2/resize:fit:720/format:webp/0*guHPBFfkuqZHzChV.png\" />"],"metadata":{"id":"rlBrmAAADxDU"}},{"cell_type":"markdown","source":["O Spark fornece uma ferramenta útil para entender o plano de execução de um trabalho chamado de Plano de Execução Físico e Lógico. Compreender este plano pode ser fundamental para otimizar suas operações de dados. Vamos ver como isso funciona:\n","\n","1. **Plano de execução lógico**: Este é o plano abstrato que descreve a sequência lógica de operações a serem executadas nos dados. Ele não leva em consideração como essas operações serão fisicamente executadas. Você pode visualizá-lo usando o método explain() em um DataFrame, passando False como argumento para ver apenas o plano lógico:"],"metadata":{"id":"-RloAi6l1YG3"}},{"cell_type":"code","source":["airbnb_rj = spark.read.csv(\"./listings.csv\", inferSchema=True, header=True)\n","airbnb_rj = airbnb_rj.where(airbnb_rj.host_id.cast(\"int\").isNotNull())\n","airbnb_rj = airbnb_rj.withColumn(\"host_id\", airbnb_rj.host_id.cast('int'))\n","airbnb_rj = airbnb_rj.withColumn(\"price\", airbnb_rj.price.cast('int'))\n","airbnb_rj = airbnb_rj.withColumn(\"minimum_nights\", airbnb_rj.minimum_nights.cast('int'))\n","airbnb_rj = airbnb_rj.withColumn(\"number_of_reviews\", airbnb_rj.number_of_reviews.cast('int'))\n","airbnb_rj = airbnb_rj.withColumn(\"reviews_per_month\", airbnb_rj.reviews_per_month.cast('double'))\n","airbnb_rj = airbnb_rj.withColumn(\"availability_365\", airbnb_rj.availability_365.cast('int'))\n","airbnb_rj = airbnb_rj.withColumn(\"number_of_reviews_ltm\", airbnb_rj.number_of_reviews_ltm.cast('double'))\n","airbnb_rj.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gWgFnsCrerDs","executionInfo":{"status":"ok","timestamp":1688322362919,"user_tz":180,"elapsed":2038,"user":{"displayName":"Luan Corumba","userId":"07892592111474770617"}},"outputId":"f249f0de-6eff-449c-86c9-bcf460564841"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["+------+--------------------+-------+--------------------+-------------------+---------------+----------+----------+---------------+-----+--------------+-----------------+-----------+-----------------+------------------------------+----------------+---------------------+-------+\n","|    id|                name|host_id|           host_name|neighbourhood_group|  neighbourhood|  latitude| longitude|      room_type|price|minimum_nights|number_of_reviews|last_review|reviews_per_month|calculated_host_listings_count|availability_365|number_of_reviews_ltm|license|\n","+------+--------------------+-------+--------------------+-------------------+---------------+----------+----------+---------------+-----+--------------+-----------------+-----------+-----------------+------------------------------+----------------+---------------------+-------+\n","| 17878|Very Nice 2Br in ...|  68997|            Matthias|               null|     Copacabana| -22.96599|  -43.1794|Entire home/apt|  350|             5|              288| 2023-03-01|             1.86|                             1|             264|                 19.0|   null|\n","| 24480|Nice and cozy nea...|  99249|                Goya|               null|        Ipanema| -22.98405| -43.20189|Entire home/apt|  624|             3|               86| 2023-03-27|             0.56|                             3|             357|                  1.0|   null|\n","|200568|30m of Ipa Beach ...| 980805|            Henrique|               null|        Ipanema| -22.98586| -43.19411|Entire home/apt|  100|            30|              198| 2023-02-13|             1.45|                             6|              59|                  9.0|   null|\n","|342874|Comfortable in Co...| 829630|             Luciana|               null|           Leme| -22.96392| -43.17263|Entire home/apt|  236|             2|              159| 2023-02-26|             1.19|                             3|             105|                 31.0|   null|\n","| 25026|Beautiful Modern ...| 102840|             Viviane|               null|     Copacabana| -22.97735| -43.19105|Entire home/apt|  307|             3|              262| 2023-03-27|             1.68|                             1|             257|                 14.0|   null|\n","|202778|Best Studio in Ri...| 529105|                Alex|               null|     Copacabana| -22.96582| -43.17786|Entire home/apt|  266|             3|              223| 2023-03-08|             1.58|                             3|             356|                 10.0|   null|\n","| 35764|COPACABANA SEA BR...| 153691|Patricia Miranda ...|               null|     Copacabana| -22.98107| -43.19136|Entire home/apt|  180|             3|              428| 2023-03-21|             2.82|                             1|              53|                 40.0|   null|\n","| 48305|Bright 6bed Penth...|  70933|             Goitaca|               null|        Ipanema| -22.98591| -43.20302|Entire home/apt| 2270|             2|              136| 2023-03-19|             0.92|                             9|             254|                 34.0|   null|\n","|203674|IPANEMA PENTHOUSE...| 999125|            Alastair|               null|        Ipanema| -22.98335| -43.20306|Entire home/apt| 1899|             5|               48| 2019-05-07|             0.36|                             1|             268|                  0.0|   null|\n","|210173|BEAUTIFUL! Spacio...|1030316|           Elizabeth|               null|     Copacabana| -22.98596| -43.19001|   Private room| 1576|             2|                3| 2019-10-03|             0.02|                             3|             365|                  0.0|   null|\n","|215793|BEAUTIFUL! Spacio...|1030316|           Elizabeth|               null|     Copacabana| -22.98596| -43.19001|   Private room|  427|             2|               39| 2023-02-23|             0.28|                             3|             259|                  6.0|   null|\n","|344463|Ocean front 2 sui...|1762102|               Hilda|               null|Barra da Tijuca|  -23.0098| -43.37099|Entire home/apt|  539|             3|               65| 2022-09-05|             0.51|                             2|             217|                  1.0|   null|\n","| 48901|Confortable 4BD 3...| 222884|              Marcio|               null|     Copacabana| -22.96574| -43.17514|Entire home/apt|  627|             3|               13| 2023-03-12|             0.14|                             2|             354|                  5.0|   null|\n","|346694|Alugo quarto espa...|1612576|            Jassanan|               null|  Vila da Penha| -22.84208| -43.31572|   Private room|  340|             1|                0|       null|             null|                             1|             362|                  0.0|   null|\n","|215887|BEAUTIFUL! Spacio...|1030316|           Elizabeth|               null|     Copacabana| -22.98596| -43.19001|   Private room|  214|             2|               39| 2023-02-22|             0.28|                             3|             255|                  5.0|   null|\n","| 49179|Djalma Ocean View...| 224192|               David|               null|     Copacabana|  -22.9791| -43.19008|Entire home/apt|  200|             4|              133| 2023-03-20|             1.06|                            21|             132|                 14.0|   null|\n","| 51703|Ocean view, block...| 238091|               Dália|               null|     Copacabana|-22.981731|-43.190571|Entire home/apt|  178|             3|              233| 2023-03-25|              1.8|                             2|             326|                 30.0|   null|\n","|216461|Comfortable room ...|1154263|         Zeilma , Da|               null|       Flamengo|  -22.9399| -43.17676|   Private room|  780|             1|                0|       null|             null|                             1|             365|                  0.0|   null|\n","|347295|Copa Penthouse Br...|1603206|                 Bob|               null|     Copacabana| -22.96654| -43.18248|Entire home/apt|  197|             3|               75| 2023-03-19|             0.56|                             5|             333|                  2.0|   null|\n","| 53533|Walk to Joatinga ...| 249439|      Sherri & Andre|               null|            Joá| -23.00809| -43.29113|Entire home/apt| 1355|             2|               31| 2023-02-23|             0.22|                             1|             332|                 13.0|   null|\n","+------+--------------------+-------+--------------------+-------------------+---------------+----------+----------+---------------+-----+--------------+-----------------+-----------+-----------------+------------------------------+----------------+---------------------+-------+\n","only showing top 20 rows\n","\n"]}]},{"cell_type":"code","source":["airbnb_rj.explain(True)"],"metadata":{"id":"hmLNfNpj1TPP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1688322406288,"user_tz":180,"elapsed":366,"user":{"displayName":"Luan Corumba","userId":"07892592111474770617"}},"outputId":"1b3b750a-6037-4c32-da7d-a11a9b2c8324"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["== Parsed Logical Plan ==\n","Project [id#352, name#353, host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#408, minimum_nights#427, number_of_reviews#446, last_review#364, reviews_per_month#465, calculated_host_listings_count#366, availability_365#484, cast(number_of_reviews_ltm#368 as double) AS number_of_reviews_ltm#503, license#369]\n","+- Project [id#352, name#353, host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#408, minimum_nights#427, number_of_reviews#446, last_review#364, reviews_per_month#465, calculated_host_listings_count#366, cast(availability_365#367 as int) AS availability_365#484, number_of_reviews_ltm#368, license#369]\n","   +- Project [id#352, name#353, host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#408, minimum_nights#427, number_of_reviews#446, last_review#364, cast(reviews_per_month#365 as double) AS reviews_per_month#465, calculated_host_listings_count#366, availability_365#367, number_of_reviews_ltm#368, license#369]\n","      +- Project [id#352, name#353, host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#408, minimum_nights#427, cast(number_of_reviews#363 as int) AS number_of_reviews#446, last_review#364, reviews_per_month#365, calculated_host_listings_count#366, availability_365#367, number_of_reviews_ltm#368, license#369]\n","         +- Project [id#352, name#353, host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#408, cast(minimum_nights#362 as int) AS minimum_nights#427, number_of_reviews#363, last_review#364, reviews_per_month#365, calculated_host_listings_count#366, availability_365#367, number_of_reviews_ltm#368, license#369]\n","            +- Project [id#352, name#353, host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, cast(price#361 as int) AS price#408, minimum_nights#362, number_of_reviews#363, last_review#364, reviews_per_month#365, calculated_host_listings_count#366, availability_365#367, number_of_reviews_ltm#368, license#369]\n","               +- Project [id#352, name#353, cast(host_id#354 as int) AS host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#361, minimum_nights#362, number_of_reviews#363, last_review#364, reviews_per_month#365, calculated_host_listings_count#366, availability_365#367, number_of_reviews_ltm#368, license#369]\n","                  +- Filter isnotnull(cast(host_id#354 as int))\n","                     +- Relation [id#352,name#353,host_id#354,host_name#355,neighbourhood_group#356,neighbourhood#357,latitude#358,longitude#359,room_type#360,price#361,minimum_nights#362,number_of_reviews#363,last_review#364,reviews_per_month#365,calculated_host_listings_count#366,availability_365#367,number_of_reviews_ltm#368,license#369] csv\n","\n","== Analyzed Logical Plan ==\n","id: string, name: string, host_id: int, host_name: string, neighbourhood_group: string, neighbourhood: string, latitude: string, longitude: string, room_type: string, price: int, minimum_nights: int, number_of_reviews: int, last_review: string, reviews_per_month: double, calculated_host_listings_count: string, availability_365: int, number_of_reviews_ltm: double, license: int\n","Project [id#352, name#353, host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#408, minimum_nights#427, number_of_reviews#446, last_review#364, reviews_per_month#465, calculated_host_listings_count#366, availability_365#484, cast(number_of_reviews_ltm#368 as double) AS number_of_reviews_ltm#503, license#369]\n","+- Project [id#352, name#353, host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#408, minimum_nights#427, number_of_reviews#446, last_review#364, reviews_per_month#465, calculated_host_listings_count#366, cast(availability_365#367 as int) AS availability_365#484, number_of_reviews_ltm#368, license#369]\n","   +- Project [id#352, name#353, host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#408, minimum_nights#427, number_of_reviews#446, last_review#364, cast(reviews_per_month#365 as double) AS reviews_per_month#465, calculated_host_listings_count#366, availability_365#367, number_of_reviews_ltm#368, license#369]\n","      +- Project [id#352, name#353, host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#408, minimum_nights#427, cast(number_of_reviews#363 as int) AS number_of_reviews#446, last_review#364, reviews_per_month#365, calculated_host_listings_count#366, availability_365#367, number_of_reviews_ltm#368, license#369]\n","         +- Project [id#352, name#353, host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#408, cast(minimum_nights#362 as int) AS minimum_nights#427, number_of_reviews#363, last_review#364, reviews_per_month#365, calculated_host_listings_count#366, availability_365#367, number_of_reviews_ltm#368, license#369]\n","            +- Project [id#352, name#353, host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, cast(price#361 as int) AS price#408, minimum_nights#362, number_of_reviews#363, last_review#364, reviews_per_month#365, calculated_host_listings_count#366, availability_365#367, number_of_reviews_ltm#368, license#369]\n","               +- Project [id#352, name#353, cast(host_id#354 as int) AS host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#361, minimum_nights#362, number_of_reviews#363, last_review#364, reviews_per_month#365, calculated_host_listings_count#366, availability_365#367, number_of_reviews_ltm#368, license#369]\n","                  +- Filter isnotnull(cast(host_id#354 as int))\n","                     +- Relation [id#352,name#353,host_id#354,host_name#355,neighbourhood_group#356,neighbourhood#357,latitude#358,longitude#359,room_type#360,price#361,minimum_nights#362,number_of_reviews#363,last_review#364,reviews_per_month#365,calculated_host_listings_count#366,availability_365#367,number_of_reviews_ltm#368,license#369] csv\n","\n","== Optimized Logical Plan ==\n","Project [id#352, name#353, cast(host_id#354 as int) AS host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, cast(price#361 as int) AS price#408, cast(minimum_nights#362 as int) AS minimum_nights#427, cast(number_of_reviews#363 as int) AS number_of_reviews#446, last_review#364, cast(reviews_per_month#365 as double) AS reviews_per_month#465, calculated_host_listings_count#366, cast(availability_365#367 as int) AS availability_365#484, number_of_reviews_ltm#368, license#369]\n","+- Filter (isnotnull(host_id#354) AND isnotnull(cast(host_id#354 as int)))\n","   +- Relation [id#352,name#353,host_id#354,host_name#355,neighbourhood_group#356,neighbourhood#357,latitude#358,longitude#359,room_type#360,price#361,minimum_nights#362,number_of_reviews#363,last_review#364,reviews_per_month#365,calculated_host_listings_count#366,availability_365#367,number_of_reviews_ltm#368,license#369] csv\n","\n","== Physical Plan ==\n","*(1) Project [id#352, name#353, cast(host_id#354 as int) AS host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, cast(price#361 as int) AS price#408, cast(minimum_nights#362 as int) AS minimum_nights#427, cast(number_of_reviews#363 as int) AS number_of_reviews#446, last_review#364, cast(reviews_per_month#365 as double) AS reviews_per_month#465, calculated_host_listings_count#366, cast(availability_365#367 as int) AS availability_365#484, number_of_reviews_ltm#368, license#369]\n","+- *(1) Filter (isnotnull(host_id#354) AND isnotnull(cast(host_id#354 as int)))\n","   +- FileScan csv [id#352,name#353,host_id#354,host_name#355,neighbourhood_group#356,neighbourhood#357,latitude#358,longitude#359,room_type#360,price#361,minimum_nights#362,number_of_reviews#363,last_review#364,reviews_per_month#365,calculated_host_listings_count#366,availability_365#367,number_of_reviews_ltm#368,license#369] Batched: false, DataFilters: [isnotnull(host_id#354), isnotnull(cast(host_id#354 as int))], Format: CSV, Location: InMemoryFileIndex(1 paths)[file:/content/listings.csv], PartitionFilters: [], PushedFilters: [IsNotNull(host_id)], ReadSchema: struct<id:string,name:string,host_id:string,host_name:string,neighbourhood_group:string,neighbour...\n","\n"]}]},{"cell_type":"markdown","source":["2. **Plano de execução físico**: Este é o plano concreto que leva em conta a forma como as operações serão executadas fisicamente no cluster, incluindo detalhes de como os dados serão particionados e distribuídos. Você pode visualizá-lo usando o método explain() sem argumentos ou passando True:"],"metadata":{"id":"KPbm3ihA1gPj"}},{"cell_type":"code","source":["airbnb_rj.explain(False)"],"metadata":{"id":"ZVGrShYyTib8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1688322510700,"user_tz":180,"elapsed":302,"user":{"displayName":"Luan Corumba","userId":"07892592111474770617"}},"outputId":"db9f8371-dfa9-4171-88f3-cc9b1af0100a"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["== Physical Plan ==\n","*(1) Project [id#352, name#353, cast(host_id#354 as int) AS host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, cast(price#361 as int) AS price#408, cast(minimum_nights#362 as int) AS minimum_nights#427, cast(number_of_reviews#363 as int) AS number_of_reviews#446, last_review#364, cast(reviews_per_month#365 as double) AS reviews_per_month#465, calculated_host_listings_count#366, cast(availability_365#367 as int) AS availability_365#484, number_of_reviews_ltm#368, license#369]\n","+- *(1) Filter (isnotnull(host_id#354) AND isnotnull(cast(host_id#354 as int)))\n","   +- FileScan csv [id#352,name#353,host_id#354,host_name#355,neighbourhood_group#356,neighbourhood#357,latitude#358,longitude#359,room_type#360,price#361,minimum_nights#362,number_of_reviews#363,last_review#364,reviews_per_month#365,calculated_host_listings_count#366,availability_365#367,number_of_reviews_ltm#368,license#369] Batched: false, DataFilters: [isnotnull(host_id#354), isnotnull(cast(host_id#354 as int))], Format: CSV, Location: InMemoryFileIndex(1 paths)[file:/content/listings.csv], PartitionFilters: [], PushedFilters: [IsNotNull(host_id)], ReadSchema: struct<id:string,name:string,host_id:string,host_name:string,neighbourhood_group:string,neighbour...\n","\n","\n"]}]},{"cell_type":"markdown","source":["O plano de execução físico será apresentado em uma forma hierárquica, onde o último passo é a operação final a ser realizada e as operações acima dela são suas dependências.\n","\n","Cada estágio da execução é detalhado neste plano, incluindo:\n","\n","- Transformações em RDDs/DataFrames/Datasets\n","- Detalhes de shuffling e particionamento\n","- Operações de leitura e escrita\n","- Uso de cache\n","\n","Analisar o plano de execução pode ajudar a identificar pontos problemáticos ou ineficiências no seu trabalho. Por exemplo, se um shuffle aparecer cedo no plano, isso pode ser um indicativo de que uma operação de junção ou agregação pode ser otimizada. Ou, se a leitura de um RDD/DataFrame parece estar demorando muito, você pode querer considerar o particionamento dos dados de uma maneira diferente.\n","\n","Lembre-se, a otimização do plano de execução é uma parte essencial do trabalho com o Spark e pode levar a melhorias significativas no desempenho e na eficiência."],"metadata":{"id":"fKcCImmr1kcY"}},{"cell_type":"code","source":["airbnb_rj.explain(mode='formatted')"],"metadata":{"id":"UIEnnUUw1oJl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1688322667845,"user_tz":180,"elapsed":446,"user":{"displayName":"Luan Corumba","userId":"07892592111474770617"}},"outputId":"853eba40-2312-411b-b495-940480cc3ec9"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["== Physical Plan ==\n","* Project (3)\n","+- * Filter (2)\n","   +- Scan csv  (1)\n","\n","\n","(1) Scan csv \n","Output [18]: [id#352, name#353, host_id#354, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#361, minimum_nights#362, number_of_reviews#363, last_review#364, reviews_per_month#365, calculated_host_listings_count#366, availability_365#367, number_of_reviews_ltm#368, license#369]\n","Batched: false\n","Location: InMemoryFileIndex [file:/content/listings.csv]\n","PushedFilters: [IsNotNull(host_id)]\n","ReadSchema: struct<id:string,name:string,host_id:string,host_name:string,neighbourhood_group:string,neighbourhood:string,latitude:string,longitude:string,room_type:string,price:string,minimum_nights:string,number_of_reviews:string,last_review:string,reviews_per_month:string,calculated_host_listings_count:string,availability_365:string,number_of_reviews_ltm:double,license:int>\n","\n","(2) Filter [codegen id : 1]\n","Input [18]: [id#352, name#353, host_id#354, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#361, minimum_nights#362, number_of_reviews#363, last_review#364, reviews_per_month#365, calculated_host_listings_count#366, availability_365#367, number_of_reviews_ltm#368, license#369]\n","Condition : (isnotnull(host_id#354) AND isnotnull(cast(host_id#354 as int)))\n","\n","(3) Project [codegen id : 1]\n","Output [18]: [id#352, name#353, cast(host_id#354 as int) AS host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, cast(price#361 as int) AS price#408, cast(minimum_nights#362 as int) AS minimum_nights#427, cast(number_of_reviews#363 as int) AS number_of_reviews#446, last_review#364, cast(reviews_per_month#365 as double) AS reviews_per_month#465, calculated_host_listings_count#366, cast(availability_365#367 as int) AS availability_365#484, number_of_reviews_ltm#368, license#369]\n","Input [18]: [id#352, name#353, host_id#354, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#361, minimum_nights#362, number_of_reviews#363, last_review#364, reviews_per_month#365, calculated_host_listings_count#366, availability_365#367, number_of_reviews_ltm#368, license#369]\n","\n","\n"]}]},{"cell_type":"markdown","source":["## Interpretando o plano de execução"],"metadata":{"id":"VILliH332CK0"}},{"cell_type":"markdown","source":["Interpretar um plano de execução do Spark envolve a compreensão dos vários componentes do plano e o que eles representam.\n","\n","Aqui estão os principais componentes de um plano de execução e como interpretá-los:\n","\n","1. **Operações**: As operações são as ações e transformações realizadas nos seus dados. Estas são geralmente listadas de baixo para cima, na ordem em que são executadas. Alguns exemplos comuns de operações são Scan, Project, Filter, Aggregate, Sort, Join, etc.\n","\n","2. **Estratégias**: O Spark usa várias estratégias para otimizar a execução de operações. Estas podem incluir coisas como a reorganização de operações para minimizar o shuffle, a escolha de diferentes tipos de junções com base no tamanho dos dados, etc.\n","\n","3. **Dados**: Os dados representam os DataFrames/RDDs em que as operações estão sendo realizadas. Eles geralmente são representados pelo nome da tabela ou por um identificador de RDD.\n","\n","4. **Detalhes**: Além das operações, os planos de execução também podem incluir detalhes adicionais sobre como as operações estão sendo executadas. Estes podem incluir coisas como o esquema de particionamento, o número de partições, o número de registros processados, etc.\n","\n","Vamos ver um exemplo simples de como interpretar um plano de execução:\n","\n","\n","```\n","== Physical Plan ==\n","*(2) BroadcastHashJoin [id#10L], [id#20L], Inner, BuildRight\n",":- *(2) Project [id#10L, name#11]\n",":  +- *(2) Filter isnotnull(id#10L)\n",":     +- *(2) Scan ExistingRDD[id#10L,name#11]\n","+- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, bigint, true] as bigint)))\n","   +- *(1) Project [id#20L, amount#21]\n","      +- *(1) Filter isnotnull(id#20L)\n","         +- *(1) Scan ExistingRDD[id#20L,amount#21]\n","```\n","\n","Este é um plano de execução para uma operação de junção. A partir da parte inferior do plano, você pode ver que duas tabelas são lidas (Scan ExistingRDD), filtradas (Filter isnotnull) e projetadas (Project). Em seguida, uma das tabelas é transmitida para todos os nós (BroadcastExchange) para realizar a junção (BroadcastHashJoin). A ordem das operações é de baixo para cima, então a operação no topo é a última a ser executada.\n","\n","Em resumo, a interpretação do plano de execução do Spark envolve a compreensão das operações, estratégias e dados representados no plano, e pode ajudar a identificar oportunidades para otimizar seu trabalho."],"metadata":{"id":"hCH1NBnU1rmL"}},{"cell_type":"markdown","source":["## Indícios de problemas de performance"],"metadata":{"id":"lPK_zcKj17pE"}},{"cell_type":"markdown","source":["Analisar o plano de execução físico do Spark pode revelar vários indícios de problemas de desempenho. Alguns deles são:\n","\n","1. **Operações de Shuffle**: As operações de Shuffle podem ser caras porque exigem a redistribuição de dados entre as partições e, muitas vezes, entre os nós de um cluster. Operações como repartition, groupBy, join (se não for uma broadcast join), podem causar shuffle. Se você ver uma operação Exchange hashpartitioning ou ShuffledHashJoin no plano, isso indica um shuffle.\n","\n","2. **Broadcast Joins**: Uma junção de broadcast envolve a cópia de todo um DataFrame para cada nó do cluster. Se o DataFrame for grande demais, isso pode causar problemas de memória. Uma operação BroadcastExchange no plano indica uma junção de broadcast.\n","\n","3. **Partições Pequenas ou Grandes Demais**: Se as partições forem muito pequenas, a sobrecarga de gerenciamento de muitas tarefas pequenas pode afetar o desempenho. Se forem muito grandes, podem não caber na memória. O número de partições é mostrado no plano de execução.\n","\n","4. **Uso Excessivo de Python UDFs**: As Python UDFs podem ser mais lentas que as operações nativas do Spark ou as UDFs escritas em Scala/Java, especialmente se a comunicação de dados entre o Python e o JVM for pesada.\n","\n","5. **Leituras Repetidas**: Se o mesmo DataFrame é lido ou calculado várias vezes, isso pode afetar o desempenho. Isso pode ser mitigado através do uso de persistência ou cache.\n","\n","6. **Partição Cruzada (Cartesian Product)**: Se você vê uma operação de CartesianProduct no plano, isso pode ser um sinal de que você está fazendo uma junção sem uma cláusula de igualdade, que pode ser muito cara em termos de desempenho.\n","\n","7. **Operações de Agregação**: As operações de agregação como groupByKey podem causar problemas de desempenho e geralmente são melhor substituídas por operações como reduceByKey.\n","\n","Essas são algumas das coisas que você pode procurar ao analisar um plano de execução físico. No entanto, otimizar o desempenho do Spark pode ser complexo e envolve muitas outras considerações além dessas."],"metadata":{"id":"wVvCFWt916vh"}},{"cell_type":"code","source":["natal_mort = pd.read_excel(open('natalidade_mortalidade_infantil.xls', 'rb'), sheet_name='2019',header=4)\n","natal_mort = natal_mort.drop([0,1,2]).drop(list(range(167,174))).iloc[:,[1,2,4,6,8,10]]\n","natal_mort.columns = [\"bairro\",\"obito_precoce\",\"obito_tardio\",\"obito_neonatal\",\"obito_1ano\",\"nascidos\"]\n","natal_mort.bairro = natal_mort.bairro.str.strip()\n","complementar = spark.createDataFrame(natal_mort)"],"metadata":{"id":"87l0DTgHe8eI","executionInfo":{"status":"ok","timestamp":1688323244597,"user_tz":180,"elapsed":1084,"user":{"displayName":"Luan Corumba","userId":"07892592111474770617"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["agrupado = airbnb_rj.groupBy(\"neighbourhood\").agg(f.avg(\"price\").alias(\"preco_medio\"))"],"metadata":{"id":"7uVlv1UZfX-t","executionInfo":{"status":"ok","timestamp":1688323247433,"user_tz":180,"elapsed":31,"user":{"displayName":"Luan Corumba","userId":"07892592111474770617"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["natalidade = agrupado.join(complementar, on=[agrupado.neighbourhood == complementar.bairro])\n","natalidade = natalidade.orderBy(natalidade.nascidos.desc())\n","natalidade = natalidade.selectExpr(\"bairro\", \"preco_medio\", \"nascidos\")"],"metadata":{"id":"R3VRZubefbK3","executionInfo":{"status":"ok","timestamp":1688323266088,"user_tz":180,"elapsed":736,"user":{"displayName":"Luan Corumba","userId":"07892592111474770617"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["natalidade.explain(True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cPmKBDsufe7h","executionInfo":{"status":"ok","timestamp":1688323272237,"user_tz":180,"elapsed":503,"user":{"displayName":"Luan Corumba","userId":"07892592111474770617"}},"outputId":"9234b43d-9957-4720-87c2-a94e88923130"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["== Parsed Logical Plan ==\n","'Project ['bairro, 'preco_medio, 'nascidos]\n","+- Sort [nascidos#618 DESC NULLS LAST], true\n","   +- Join Inner, (neighbourhood#357 = bairro#613)\n","      :- Aggregate [neighbourhood#357], [neighbourhood#357, avg(price#408) AS preco_medio#644]\n","      :  +- Project [id#352, name#353, host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#408, minimum_nights#427, number_of_reviews#446, last_review#364, reviews_per_month#465, calculated_host_listings_count#366, availability_365#484, cast(number_of_reviews_ltm#368 as double) AS number_of_reviews_ltm#503, license#369]\n","      :     +- Project [id#352, name#353, host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#408, minimum_nights#427, number_of_reviews#446, last_review#364, reviews_per_month#465, calculated_host_listings_count#366, cast(availability_365#367 as int) AS availability_365#484, number_of_reviews_ltm#368, license#369]\n","      :        +- Project [id#352, name#353, host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#408, minimum_nights#427, number_of_reviews#446, last_review#364, cast(reviews_per_month#365 as double) AS reviews_per_month#465, calculated_host_listings_count#366, availability_365#367, number_of_reviews_ltm#368, license#369]\n","      :           +- Project [id#352, name#353, host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#408, minimum_nights#427, cast(number_of_reviews#363 as int) AS number_of_reviews#446, last_review#364, reviews_per_month#365, calculated_host_listings_count#366, availability_365#367, number_of_reviews_ltm#368, license#369]\n","      :              +- Project [id#352, name#353, host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#408, cast(minimum_nights#362 as int) AS minimum_nights#427, number_of_reviews#363, last_review#364, reviews_per_month#365, calculated_host_listings_count#366, availability_365#367, number_of_reviews_ltm#368, license#369]\n","      :                 +- Project [id#352, name#353, host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, cast(price#361 as int) AS price#408, minimum_nights#362, number_of_reviews#363, last_review#364, reviews_per_month#365, calculated_host_listings_count#366, availability_365#367, number_of_reviews_ltm#368, license#369]\n","      :                    +- Project [id#352, name#353, cast(host_id#354 as int) AS host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#361, minimum_nights#362, number_of_reviews#363, last_review#364, reviews_per_month#365, calculated_host_listings_count#366, availability_365#367, number_of_reviews_ltm#368, license#369]\n","      :                       +- Filter isnotnull(cast(host_id#354 as int))\n","      :                          +- Relation [id#352,name#353,host_id#354,host_name#355,neighbourhood_group#356,neighbourhood#357,latitude#358,longitude#359,room_type#360,price#361,minimum_nights#362,number_of_reviews#363,last_review#364,reviews_per_month#365,calculated_host_listings_count#366,availability_365#367,number_of_reviews_ltm#368,license#369] csv\n","      +- LogicalRDD [bairro#613, obito_precoce#614, obito_tardio#615, obito_neonatal#616, obito_1ano#617, nascidos#618], false\n","\n","== Analyzed Logical Plan ==\n","bairro: string, preco_medio: double, nascidos: double\n","Project [bairro#613, preco_medio#644, nascidos#618]\n","+- Sort [nascidos#618 DESC NULLS LAST], true\n","   +- Join Inner, (neighbourhood#357 = bairro#613)\n","      :- Aggregate [neighbourhood#357], [neighbourhood#357, avg(price#408) AS preco_medio#644]\n","      :  +- Project [id#352, name#353, host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#408, minimum_nights#427, number_of_reviews#446, last_review#364, reviews_per_month#465, calculated_host_listings_count#366, availability_365#484, cast(number_of_reviews_ltm#368 as double) AS number_of_reviews_ltm#503, license#369]\n","      :     +- Project [id#352, name#353, host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#408, minimum_nights#427, number_of_reviews#446, last_review#364, reviews_per_month#465, calculated_host_listings_count#366, cast(availability_365#367 as int) AS availability_365#484, number_of_reviews_ltm#368, license#369]\n","      :        +- Project [id#352, name#353, host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#408, minimum_nights#427, number_of_reviews#446, last_review#364, cast(reviews_per_month#365 as double) AS reviews_per_month#465, calculated_host_listings_count#366, availability_365#367, number_of_reviews_ltm#368, license#369]\n","      :           +- Project [id#352, name#353, host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#408, minimum_nights#427, cast(number_of_reviews#363 as int) AS number_of_reviews#446, last_review#364, reviews_per_month#365, calculated_host_listings_count#366, availability_365#367, number_of_reviews_ltm#368, license#369]\n","      :              +- Project [id#352, name#353, host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#408, cast(minimum_nights#362 as int) AS minimum_nights#427, number_of_reviews#363, last_review#364, reviews_per_month#365, calculated_host_listings_count#366, availability_365#367, number_of_reviews_ltm#368, license#369]\n","      :                 +- Project [id#352, name#353, host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, cast(price#361 as int) AS price#408, minimum_nights#362, number_of_reviews#363, last_review#364, reviews_per_month#365, calculated_host_listings_count#366, availability_365#367, number_of_reviews_ltm#368, license#369]\n","      :                    +- Project [id#352, name#353, cast(host_id#354 as int) AS host_id#389, host_name#355, neighbourhood_group#356, neighbourhood#357, latitude#358, longitude#359, room_type#360, price#361, minimum_nights#362, number_of_reviews#363, last_review#364, reviews_per_month#365, calculated_host_listings_count#366, availability_365#367, number_of_reviews_ltm#368, license#369]\n","      :                       +- Filter isnotnull(cast(host_id#354 as int))\n","      :                          +- Relation [id#352,name#353,host_id#354,host_name#355,neighbourhood_group#356,neighbourhood#357,latitude#358,longitude#359,room_type#360,price#361,minimum_nights#362,number_of_reviews#363,last_review#364,reviews_per_month#365,calculated_host_listings_count#366,availability_365#367,number_of_reviews_ltm#368,license#369] csv\n","      +- LogicalRDD [bairro#613, obito_precoce#614, obito_tardio#615, obito_neonatal#616, obito_1ano#617, nascidos#618], false\n","\n","== Optimized Logical Plan ==\n","Project [bairro#613, preco_medio#644, nascidos#618]\n","+- Sort [nascidos#618 DESC NULLS LAST], true\n","   +- Project [preco_medio#644, bairro#613, nascidos#618]\n","      +- Join Inner, (neighbourhood#357 = bairro#613)\n","         :- Aggregate [neighbourhood#357], [neighbourhood#357, avg(price#408) AS preco_medio#644]\n","         :  +- Project [neighbourhood#357, cast(price#361 as int) AS price#408]\n","         :     +- Filter ((isnotnull(host_id#354) AND isnotnull(cast(host_id#354 as int))) AND isnotnull(neighbourhood#357))\n","         :        +- Relation [id#352,name#353,host_id#354,host_name#355,neighbourhood_group#356,neighbourhood#357,latitude#358,longitude#359,room_type#360,price#361,minimum_nights#362,number_of_reviews#363,last_review#364,reviews_per_month#365,calculated_host_listings_count#366,availability_365#367,number_of_reviews_ltm#368,license#369] csv\n","         +- Project [bairro#613, nascidos#618]\n","            +- Filter isnotnull(bairro#613)\n","               +- LogicalRDD [bairro#613, obito_precoce#614, obito_tardio#615, obito_neonatal#616, obito_1ano#617, nascidos#618], false\n","\n","== Physical Plan ==\n","AdaptiveSparkPlan isFinalPlan=false\n","+- Project [bairro#613, preco_medio#644, nascidos#618]\n","   +- Sort [nascidos#618 DESC NULLS LAST], true, 0\n","      +- Exchange rangepartitioning(nascidos#618 DESC NULLS LAST, 200), ENSURE_REQUIREMENTS, [plan_id=193]\n","         +- Project [preco_medio#644, bairro#613, nascidos#618]\n","            +- BroadcastHashJoin [neighbourhood#357], [bairro#613], Inner, BuildLeft, false\n","               :- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=189]\n","               :  +- HashAggregate(keys=[neighbourhood#357], functions=[avg(price#408)], output=[neighbourhood#357, preco_medio#644])\n","               :     +- Exchange hashpartitioning(neighbourhood#357, 200), ENSURE_REQUIREMENTS, [plan_id=186]\n","               :        +- HashAggregate(keys=[neighbourhood#357], functions=[partial_avg(price#408)], output=[neighbourhood#357, sum#668, count#669L])\n","               :           +- Project [neighbourhood#357, cast(price#361 as int) AS price#408]\n","               :              +- Filter ((isnotnull(host_id#354) AND isnotnull(cast(host_id#354 as int))) AND isnotnull(neighbourhood#357))\n","               :                 +- FileScan csv [host_id#354,neighbourhood#357,price#361] Batched: false, DataFilters: [isnotnull(host_id#354), isnotnull(cast(host_id#354 as int)), isnotnull(neighbourhood#357)], Format: CSV, Location: InMemoryFileIndex(1 paths)[file:/content/listings.csv], PartitionFilters: [], PushedFilters: [IsNotNull(host_id), IsNotNull(neighbourhood)], ReadSchema: struct<host_id:string,neighbourhood:string,price:string>\n","               +- Project [bairro#613, nascidos#618]\n","                  +- Filter isnotnull(bairro#613)\n","                     +- Scan ExistingRDD[bairro#613,obito_precoce#614,obito_tardio#615,obito_neonatal#616,obito_1ano#617,nascidos#618]\n","\n"]}]},{"cell_type":"code","source":["natalidade.explain(mode = 'formatted')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"47fXglTt6as4","executionInfo":{"status":"ok","timestamp":1688323366921,"user_tz":180,"elapsed":37,"user":{"displayName":"Luan Corumba","userId":"07892592111474770617"}},"outputId":"c3dd11e3-6c79-4fe4-81d8-e9536a9a63dd"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["== Physical Plan ==\n","AdaptiveSparkPlan (16)\n","+- Project (15)\n","   +- Sort (14)\n","      +- Exchange (13)\n","         +- Project (12)\n","            +- BroadcastHashJoin Inner BuildLeft (11)\n","               :- BroadcastExchange (7)\n","               :  +- HashAggregate (6)\n","               :     +- Exchange (5)\n","               :        +- HashAggregate (4)\n","               :           +- Project (3)\n","               :              +- Filter (2)\n","               :                 +- Scan csv  (1)\n","               +- Project (10)\n","                  +- Filter (9)\n","                     +- Scan ExistingRDD (8)\n","\n","\n","(1) Scan csv \n","Output [3]: [host_id#354, neighbourhood#357, price#361]\n","Batched: false\n","Location: InMemoryFileIndex [file:/content/listings.csv]\n","PushedFilters: [IsNotNull(host_id), IsNotNull(neighbourhood)]\n","ReadSchema: struct<host_id:string,neighbourhood:string,price:string>\n","\n","(2) Filter\n","Input [3]: [host_id#354, neighbourhood#357, price#361]\n","Condition : ((isnotnull(host_id#354) AND isnotnull(cast(host_id#354 as int))) AND isnotnull(neighbourhood#357))\n","\n","(3) Project\n","Output [2]: [neighbourhood#357, cast(price#361 as int) AS price#408]\n","Input [3]: [host_id#354, neighbourhood#357, price#361]\n","\n","(4) HashAggregate\n","Input [2]: [neighbourhood#357, price#408]\n","Keys [1]: [neighbourhood#357]\n","Functions [1]: [partial_avg(price#408)]\n","Aggregate Attributes [2]: [sum#666, count#667L]\n","Results [3]: [neighbourhood#357, sum#668, count#669L]\n","\n","(5) Exchange\n","Input [3]: [neighbourhood#357, sum#668, count#669L]\n","Arguments: hashpartitioning(neighbourhood#357, 200), ENSURE_REQUIREMENTS, [plan_id=186]\n","\n","(6) HashAggregate\n","Input [3]: [neighbourhood#357, sum#668, count#669L]\n","Keys [1]: [neighbourhood#357]\n","Functions [1]: [avg(price#408)]\n","Aggregate Attributes [1]: [avg(price#408)#643]\n","Results [2]: [neighbourhood#357, avg(price#408)#643 AS preco_medio#644]\n","\n","(7) BroadcastExchange\n","Input [2]: [neighbourhood#357, preco_medio#644]\n","Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=189]\n","\n","(8) Scan ExistingRDD\n","Output [6]: [bairro#613, obito_precoce#614, obito_tardio#615, obito_neonatal#616, obito_1ano#617, nascidos#618]\n","Arguments: [bairro#613, obito_precoce#614, obito_tardio#615, obito_neonatal#616, obito_1ano#617, nascidos#618], MapPartitionsRDD[37] at applySchemaToPythonRDD at NativeMethodAccessorImpl.java:0, ExistingRDD, UnknownPartitioning(0)\n","\n","(9) Filter\n","Input [6]: [bairro#613, obito_precoce#614, obito_tardio#615, obito_neonatal#616, obito_1ano#617, nascidos#618]\n","Condition : isnotnull(bairro#613)\n","\n","(10) Project\n","Output [2]: [bairro#613, nascidos#618]\n","Input [6]: [bairro#613, obito_precoce#614, obito_tardio#615, obito_neonatal#616, obito_1ano#617, nascidos#618]\n","\n","(11) BroadcastHashJoin\n","Left keys [1]: [neighbourhood#357]\n","Right keys [1]: [bairro#613]\n","Join type: Inner\n","Join condition: None\n","\n","(12) Project\n","Output [3]: [preco_medio#644, bairro#613, nascidos#618]\n","Input [4]: [neighbourhood#357, preco_medio#644, bairro#613, nascidos#618]\n","\n","(13) Exchange\n","Input [3]: [preco_medio#644, bairro#613, nascidos#618]\n","Arguments: rangepartitioning(nascidos#618 DESC NULLS LAST, 200), ENSURE_REQUIREMENTS, [plan_id=193]\n","\n","(14) Sort\n","Input [3]: [preco_medio#644, bairro#613, nascidos#618]\n","Arguments: [nascidos#618 DESC NULLS LAST], true, 0\n","\n","(15) Project\n","Output [3]: [bairro#613, preco_medio#644, nascidos#618]\n","Input [3]: [preco_medio#644, bairro#613, nascidos#618]\n","\n","(16) AdaptiveSparkPlan\n","Output [3]: [bairro#613, preco_medio#644, nascidos#618]\n","Arguments: isFinalPlan=false\n","\n","\n"]}]},{"cell_type":"markdown","source":["## Conclusão da sessão"],"metadata":{"id":"u20jBuvdTcBG"}},{"cell_type":"markdown","source":["1. Análise do Plano de Execução\n","2. Interpretando o plano de execução\n","3. Indícios de problemas de performance\n","\n"],"metadata":{"id":"qmkkKK_sTdan"}},{"cell_type":"markdown","source":["## Exercício"],"metadata":{"id":"NCnmlbdJaB0S"}},{"cell_type":"markdown","source":["1. O que são as operações ```Exchange hashpartitioning``` e ```ShuffledHashJoin``` no plano de execução físico do Spark e por que elas podem indicar um problema de desempenho?\n","\n","2. Qual é o impacto de ter partições muito pequenas ou muito grandes no plano de execução físico do Spark e como você pode identificar isso no plano de execução?\n","\n","3. O que é uma junção de broadcast (```BroadcastExchange```) no plano de execução físico do Spark e em que circunstâncias ela pode causar problemas de desempenho?\n","\n","4. Como o uso excessivo de Python UDFs pode afetar o desempenho do seu trabalho Spark e como você pode identificar isso no plano de execução?\n","\n","5. Qual é o problema potencial com operações de agregação como groupByKey e qual é a alternativa preferida para melhorar o desempenho? Como você identifica esse problema ao analisar o plano de execução?"],"metadata":{"id":"uRc2Gm8iJpon"}}]}