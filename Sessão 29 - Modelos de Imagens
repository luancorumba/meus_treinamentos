{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true,"collapsed_sections":["lJeDRY2Zc6Tn"],"authorship_tag":"ABX9TyNgbJhggh2c28gsvg75xWuB"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["###### Inicialização"],"metadata":{"id":"lJeDRY2Zc6Tn"}},{"cell_type":"code","source":["# instalar as dependências\n","!apt-get install openjdk-8-jdk-headless -qq > /dev/null\n","!wget -q https://dlcdn.apache.org/spark/spark-3.4.0/spark-3.4.0-bin-hadoop3.tgz\n","!tar xf spark-3.4.0-bin-hadoop3.tgz\n","!pip install -q findspark opencv-python"],"metadata":{"id":"ty_kN91oadtM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# configurar as variáveis de ambiente\n","import os\n","os.environ[\"JAVA_HOME\"] = \"/usr/lib/jvm/java-8-openjdk-amd64\"\n","os.environ[\"SPARK_HOME\"] = \"/content/spark-3.4.0-bin-hadoop3\"\n","\n","# tornar o pyspark \"importável\"\n","import findspark\n","findspark.init('spark-3.4.0-bin-hadoop3')"],"metadata":{"id":"GMGdL4xyc423"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!wget --quiet --show-progress https://github.com/YoongiKim/CIFAR-10-images/archive/refs/heads/master.zip"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OvLYT0sgS0L7","executionInfo":{"status":"ok","timestamp":1688823999016,"user_tz":180,"elapsed":4858,"user":{"displayName":"Luan Corumba","userId":"07892592111474770617"}},"outputId":"f189d1ba-70bc-4dc2-f1e8-d25e3084ee7e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["master.zip              [            <=>     ]  53.24M  12.6MB/s    in 4.3s    \n"]}]},{"cell_type":"code","source":["!unzip -qq master.zip"],"metadata":{"id":"LlyWpf6TTRWv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import io\n","import numpy as np\n","import pandas as pd\n","from typing import Iterator\n","from pyspark.sql import SparkSession\n","from pyspark.sql import functions as f\n","from pyspark.sql import types as t\n","from pyspark.ml.functions import vector_to_array, array_to_vector\n","from pyspark.ml import Pipeline\n","from pyspark.ml.feature import StringIndexer, OneHotEncoder, StandardScaler, MinMaxScaler, VectorAssembler\n","from pyspark.ml.evaluation import BinaryClassificationEvaluator\n","from matplotlib import pyplot as plt\n","\n","import cv2\n","from PIL import Image\n","\n","spark = SparkSession.builder.master('local[*]').getOrCreate()\n","sc = spark.sparkContext"],"metadata":{"id":"DjEzihGSZcIb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Solução de:\n","# https://stackoverflow.com/questions/52847408/pyspark-extract-roc-curve\n","\n","from pyspark.mllib.evaluation import BinaryClassificationMetrics\n","\n","class CurveMetrics(BinaryClassificationMetrics):\n","    def __init__(self, *args):\n","        super(CurveMetrics, self).__init__(*args)\n","\n","    def _to_list(self, rdd):\n","        points = []\n","        # Note this collect could be inefficient for large datasets\n","        # considering there may be one probability per datapoint (at most)\n","        # The Scala version takes a numBins parameter,\n","        # but it doesn't seem possible to pass this from Python to Java\n","        for row in rdd.collect():\n","            # Results are returned as type scala.Tuple2,\n","            # which doesn't appear to have a py4j mapping\n","            points += [(float(row._1()), float(row._2()))]\n","        return points\n","\n","    def get_curve(self, method):\n","        rdd = getattr(self._java_model, method)().toJavaRDD()\n","        return self._to_list(rdd)"],"metadata":{"id":"_lLb4oC1v3ji"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# PySpark (Sessão 29)"],"metadata":{"id":"frFI5O7cZ5L8"}},{"cell_type":"markdown","source":["![img](https://upload.wikimedia.org/wikipedia/commons/thumb/f/f3/Apache_Spark_logo.svg/250px-Apache_Spark_logo.svg.png)\n","\n","\n","https://spark.apache.org/docs/latest/api/python/"],"metadata":{"id":"pJCODccgTiQD"}},{"cell_type":"markdown","source":["## Recapitulando o que vimos antes..."],"metadata":{"id":"bGI5IDjEL5Z7"}},{"cell_type":"markdown","source":["1. Introdução ao OpenCV\n","2. Processamento de imagens com OpenCV\n","3. Integrando o OpenCV no PySpark"],"metadata":{"id":"YDzvmVFPswXd"}},{"cell_type":"markdown","source":["## Preparando os Dados"],"metadata":{"id":"w_GXUXTITQuX"}},{"cell_type":"code","source":["class_1_path = \"/content/CIFAR-10-images-master/train/dog\"\n","class_2_path = \"/content/CIFAR-10-images-master/train/cat\""],"metadata":{"id":"ZVGrShYyTib8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class_1 = spark.read.format(\"image\").load(class_1_path).withColumn(\"target\", f.lit(0))\n","class_2 = spark.read.format(\"image\").load(class_2_path).withColumn(\"target\", f.lit(1))"],"metadata":{"id":"rMBCT_erxLji"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["images_df = class_1.union(class_2)"],"metadata":{"id":"ISPuBvrjzO6y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["images_df.select(\"image.origin\", \"image.width\", \"image.height\", \"image.nChannels\", \"image.mode\", \"target\").show(truncate=False)"],"metadata":{"id":"DMPNaFF368p6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1688824851169,"user_tz":180,"elapsed":2590,"user":{"displayName":"Luan Corumba","userId":"07892592111474770617"}},"outputId":"93bc33ed-41aa-4c93-a86a-0d8bf17a2297"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+---------------------------------------------------------+-----+------+---------+----+------+\n","|origin                                                   |width|height|nChannels|mode|target|\n","+---------------------------------------------------------+-----+------+---------+----+------+\n","|file:///content/CIFAR-10-images-master/train/dog/2879.jpg|32   |32    |3        |16  |0     |\n","|file:///content/CIFAR-10-images-master/train/dog/4735.jpg|32   |32    |3        |16  |0     |\n","|file:///content/CIFAR-10-images-master/train/dog/0508.jpg|32   |32    |3        |16  |0     |\n","|file:///content/CIFAR-10-images-master/train/dog/0260.jpg|32   |32    |3        |16  |0     |\n","|file:///content/CIFAR-10-images-master/train/dog/0376.jpg|32   |32    |3        |16  |0     |\n","|file:///content/CIFAR-10-images-master/train/dog/3156.jpg|32   |32    |3        |16  |0     |\n","|file:///content/CIFAR-10-images-master/train/dog/4309.jpg|32   |32    |3        |16  |0     |\n","|file:///content/CIFAR-10-images-master/train/dog/0854.jpg|32   |32    |3        |16  |0     |\n","|file:///content/CIFAR-10-images-master/train/dog/0521.jpg|32   |32    |3        |16  |0     |\n","|file:///content/CIFAR-10-images-master/train/dog/3153.jpg|32   |32    |3        |16  |0     |\n","|file:///content/CIFAR-10-images-master/train/dog/1750.jpg|32   |32    |3        |16  |0     |\n","|file:///content/CIFAR-10-images-master/train/dog/4041.jpg|32   |32    |3        |16  |0     |\n","|file:///content/CIFAR-10-images-master/train/dog/4766.jpg|32   |32    |3        |16  |0     |\n","|file:///content/CIFAR-10-images-master/train/dog/2504.jpg|32   |32    |3        |16  |0     |\n","|file:///content/CIFAR-10-images-master/train/dog/1063.jpg|32   |32    |3        |16  |0     |\n","|file:///content/CIFAR-10-images-master/train/dog/1939.jpg|32   |32    |3        |16  |0     |\n","|file:///content/CIFAR-10-images-master/train/dog/2415.jpg|32   |32    |3        |16  |0     |\n","|file:///content/CIFAR-10-images-master/train/dog/2948.jpg|32   |32    |3        |16  |0     |\n","|file:///content/CIFAR-10-images-master/train/dog/2226.jpg|32   |32    |3        |16  |0     |\n","|file:///content/CIFAR-10-images-master/train/dog/3312.jpg|32   |32    |3        |16  |0     |\n","+---------------------------------------------------------+-----+------+---------+----+------+\n","only showing top 20 rows\n","\n"]}]},{"cell_type":"code","source":["def convert_bgr_array_to_rgb_array(img_array):\n","    B, G, R = img_array.T\n","    return np.array((R, G, B)).T\n","\n","def resize_img(img_data, resize=True):\n","  mode = 'RGBA' if (img_data.nChannels == 4) else 'RGB'\n","\n","  img = Image.frombytes(mode=mode, data=img_data.data, size=[img_data.width, img_data.height])\n","  img = img.convert('RGB') if (mode == 'RGBA') else img\n","  img = img.resize([224, 224], resample=Image.BICUBIC) if (resize) else img\n","  arr = convert_bgr_array_to_rgb_array(np.asarray(img))\n","  arr = arr.reshape([224*224*3]) if (resize) else arr.reshape([img_data.width*img_data.height*3])\n","\n","  return arr\n","\n","def detecta_bordas(img_data):\n","  mode = 'RGBA' if (img_data.nChannels == 4) else 'RGB'\n","\n","  pil_image = Image.frombytes(mode=mode,\n","                              data=bytes(img_data.data),\n","                              size=[img_data.width, img_data.height])\n","\n","  cv2_image = np.array(pil_image)\n","  bordas = cv2.Canny(cv2_image, 100, 200)  # Detecta as bordas da imagem\n","  contornos, _ = cv2.findContours(bordas, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)  # Encontra os contornos\n","  cv2.drawContours(cv2_image, contornos, -1, (0, 255, 0), 2)  # Desenha os contornos na imagem\n","\n","  return cv2_image\n","\n","def desfoca_img(img_data):\n","  mode = 'RGBA' if (img_data.nChannels == 4) else 'RGB'\n","\n","  pil_image = Image.frombytes(mode=mode,\n","                              data=bytes(img_data.data),\n","                              size=[img_data.width, img_data.height])\n","\n","  cv2_image = np.array(pil_image)\n","  return cv2.GaussianBlur(cv2_image, (5, 5), 0).reshape([cv2_image.shape[0] * cv2_image.shape[1] * 3])\n","\n","def para_cinza(img_data):\n","  mode = 'RGBA' if (img_data.nChannels == 4) else 'RGB'\n","\n","  pil_image = Image.frombytes(mode=mode,\n","                              data=bytes(img_data.data),\n","                              size=[img_data.width, img_data.height])\n","\n","  cv2_image = np.array(pil_image)\n","  return cv2.cvtColor(cv2_image, cv2.COLOR_BGR2GRAY).reshape([cv2_image.shape[0] * cv2_image.shape[1]])\n","\n","def binariza_img(img_data):\n","  mode = 'RGBA' if (img_data.nChannels == 4) else 'RGB'\n","\n","  pil_image = Image.frombytes(mode=mode,\n","                              data=bytes(img_data.data),\n","                              size=[img_data.width, img_data.height])\n","\n","  cv2_image = np.array(pil_image)\n","  _, imagem_binaria = cv2.threshold(cv2_image, 127, 255, cv2.THRESH_BINARY)\n","  return imagem_binaria.reshape([cv2_image.shape[0] * cv2_image.shape[1] * 3])\n","\n","def resize_image_udf(dataframe_batch_iterator: Iterator[pd.DataFrame]) -> Iterator[pd.DataFrame]:\n","    for dataframe_batch in dataframe_batch_iterator:\n","        dataframe_batch[\"bordas_da_imagem\"] = dataframe_batch.apply(desfoca_img, axis=1)\n","        dataframe_batch[\"imagem_desfocada\"] = dataframe_batch.apply(desfoca_img, axis=1)\n","        dataframe_batch[\"imagem_cinza\"] = dataframe_batch.apply(para_cinza, axis=1)\n","        dataframe_batch[\"imagem_binarizada\"] = dataframe_batch.apply(binariza_img, axis=1)\n","        dataframe_batch[\"imagem_reescalada\"] = dataframe_batch.apply(resize_img, args=(False,), axis=1)\n","        yield dataframe_batch"],"metadata":{"id":"yC0sImFnugDZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["schema = t.StructType(images_df.select(\"image.*\",\"target\").schema.fields + [\n","    t.StructField(\"bordas_da_imagem\", t.ArrayType(t.IntegerType()), True),\n","    t.StructField(\"imagem_desfocada\", t.ArrayType(t.IntegerType()), True),\n","    t.StructField(\"imagem_cinza\", t.ArrayType(t.IntegerType()), True),\n","    t.StructField(\"imagem_binarizada\", t.ArrayType(t.IntegerType()), True),\n","    t.StructField(\"imagem_reescalada\", t.ArrayType(t.IntegerType()), True)\n","])"],"metadata":{"id":"j3KBEPgnuHxm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["resized_df = images_df.sample(.05).select(\"image.*\",\"target\").mapInPandas(resize_image_udf, schema)\n","resized_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JYSF5_eCu1rX","executionInfo":{"status":"ok","timestamp":1688834150240,"user_tz":180,"elapsed":417,"user":{"displayName":"Luan Corumba","userId":"07892592111474770617"}},"outputId":"62150613-53a0-4842-be25-889b4aab6626"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DataFrame[origin: string, height: int, width: int, nChannels: int, mode: int, data: binary, target: int, bordas_da_imagem: array<int>, imagem_desfocada: array<int>, imagem_cinza: array<int>, imagem_binarizada: array<int>, imagem_reescalada: array<int>]"]},"metadata":{},"execution_count":150}]},{"cell_type":"code","source":["continuas = [\"bordas_da_imagem\",\"imagem_desfocada\",\"imagem_cinza\",\"imagem_binarizada\",\"imagem_reescalada\"]\n","resposta = [\"target\"]"],"metadata":{"id":"S72fwj3rFqzF"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Ajustar compilando todas as colunas"],"metadata":{"id":"6wtgCzQVEKWi"}},{"cell_type":"markdown","source":["Combinaremos todas as colunas de recurso em um vetor"],"metadata":{"id":"5TYA-N4gb3UM"}},{"cell_type":"code","source":["resized_df = resized_df.select(f.concat(*([f.col(c) for c in continuas])).alias(\"features\"),\"target\")\n","resized_df = resized_df.withColumn(\"features\", array_to_vector(\"features\"))"],"metadata":{"id":"Xcmi0L8CUi_q"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Separamos entre treino e teste"],"metadata":{"id":"PbDJhboBWQkF"}},{"cell_type":"code","source":["treino, teste = resized_df.randomSplit([0.7, 0.3])"],"metadata":{"id":"QOCEpJz5Fzby"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["stages = []"],"metadata":{"id":"XLURzI4VF6fG"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Escalaremos as variáveis utilizando o StandardScaler"],"metadata":{"id":"CHw5VHetF_PU"}},{"cell_type":"code","source":["scaler = StandardScaler(inputCol='features', outputCol='features_scaled')\n","stages += [scaler]"],"metadata":{"id":"4qYE4Md55GjX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Transformaremos os dados para estarem prontos para aplicarmos os modelos"],"metadata":{"id":"t738mMASGSaN"}},{"cell_type":"code","source":["pipeline = Pipeline(stages=stages)\n","preparacao = pipeline.fit(treino)"],"metadata":{"id":"WhAdhX1lY_WE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["treino = preparacao.transform(treino).select('features_scaled','target')\n","teste = preparacao.transform(teste).select('features_scaled','target')"],"metadata":{"id":"Ryhb67VmcNWw"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Classificando as imagens"],"metadata":{"id":"fSxzVEiT1Aep"}},{"cell_type":"markdown","source":["Para calcularmos a quantidade total de elementos depois das transofrmações de OneHot\n"],"metadata":{"id":"tcIejHoRJ8_X"}},{"cell_type":"code","source":["input_size = len(treino.limit(1).toPandas().features_scaled[0].toArray())"],"metadata":{"id":"_mCWc7KmmZFZ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Treinaremos o modelo"],"metadata":{"id":"ql9u00xcKA1O"}},{"cell_type":"code","source":["from pyspark.ml.classification import MultilayerPerceptronClassifier\n","\n","mlp = MultilayerPerceptronClassifier(labelCol=\"target\", featuresCol=\"features_scaled\", layers=[input_size, 5, 8, 5, 2], seed=123)\n","\n","mlp_model = mlp.fit(treino)\n","mlp_pred = mlp_model.transform(teste)"],"metadata":{"id":"OvbBc5--e6Dp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Avaliaremos em razão da curva ROC"],"metadata":{"id":"pIxXi-y3KCti"}},{"cell_type":"code","source":["evaluator = BinaryClassificationEvaluator(labelCol='target')\n","roc_auc = evaluator.evaluate(mlp_pred)\n","roc_auc"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A7cJ_I_KJyGM","executionInfo":{"status":"ok","timestamp":1688835060192,"user_tz":180,"elapsed":128226,"user":{"displayName":"Luan Corumba","userId":"07892592111474770617"}},"outputId":"3c9412f9-b08c-4534-e6af-acce0c89d2a1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.621978021978022"]},"metadata":{},"execution_count":160}]},{"cell_type":"code","source":["preds = mlp_pred.select('target','probability').rdd.map(lambda row: (float(row['probability'][1]), float(row['target'])))\n","roc = CurveMetrics(preds).get_curve('roc')\n","pr = CurveMetrics(preds).get_curve('pr')"],"metadata":{"executionInfo":{"status":"ok","timestamp":1688835409172,"user_tz":180,"elapsed":348996,"user":{"displayName":"Luan Corumba","userId":"07892592111474770617"}},"id":"3L8xifJTeIDd","colab":{"base_uri":"https://localhost:8080/"},"outputId":"ef7e6888-e4d0-41e8-e6a3-578bf78dec65"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/content/spark-3.4.0-bin-hadoop3/python/pyspark/sql/context.py:157: FutureWarning: Deprecated in 3.0.0. Use SparkSession.builder.getOrCreate() instead.\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["fig, axs = plt.subplots(1, 2, figsize=(14,6))\n","axs[0].plot([x[0] for x in roc], [x[1] for x in roc])\n","axs[0].set_ylabel('Taxa de Falsos Positivos')\n","axs[0].set_xlabel('Taxa de Verdadeiros Positivos')\n","axs[0].set_title('Curva ROC');\n","\n","axs[1].plot([x[0] for x in pr], [x[1] for x in pr])\n","axs[1].set_ylabel('Precision')\n","axs[1].set_xlabel('Recall')\n","axs[1].set_title('Curva P/R');"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":498},"executionInfo":{"status":"ok","timestamp":1688835409883,"user_tz":180,"elapsed":732,"user":{"displayName":"Luan Corumba","userId":"07892592111474770617"}},"outputId":"a5c0ac47-9cbe-4941-831c-2184c9db4225","id":"FNH0rM0WeIDe"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## Conclusão da sessão"],"metadata":{"id":"u20jBuvdTcBG"}},{"cell_type":"markdown","source":["1. Preparando dados de imagem para modelagem\n","2. Classificando Imagens\n","\n"],"metadata":{"id":"qmkkKK_sTdan"}},{"cell_type":"markdown","source":["## Exercício"],"metadata":{"id":"NCnmlbdJaB0S"}},{"cell_type":"markdown","source":["1. Carregando e pré-processando um conjunto de dados de imagens\n","  - Carregue um conjunto de dados de imagens utilizando o MLlib.\n","  - Realize pré-processamento nas imagens, como redimensionamento, normalização, etc.\n","\n","2. Treinando um modelo de classificação de imagens\n","  - Separe o conjunto de dados em treinamento e teste.\n","  - Treine um modelo de classificação de imagens utilizando o algoritmo desejado (por exemplo, SVM, Random Forest, etc.).\n","  - Avalie o desempenho do modelo utilizando métricas como acurácia, precisão, recall, etc.\n","\n","3. Extração de características de imagens\n","  - Utilize técnicas de extração de características, como histogramas de cor ou descritores de textura, para representar as imagens.\n","  - Treine um modelo utilizando as características extraídas e avalie seu desempenho.\n","\n","4. Classificação de novas imagens\n","  - Utilize um modelo treinado para classificar novas imagens.\n","  - Carregue uma ou mais imagens não vistas anteriormente e faça previsões utilizando o modelo.\n","\n","5. Transfer Learning em modelos de imagens\n","  - Carregue um modelo pré-treinado para classificação de imagens, como o VGG16 ou o InceptionV3.\n","  - Ajuste o modelo pré-treinado aos seus dados utilizando transfer learning.\n","  - Avalie o desempenho do modelo ajustado utilizando o conjunto de teste."],"metadata":{"id":"uRc2Gm8iJpon"}}]}